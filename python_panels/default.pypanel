<?xml version="1.0" encoding="UTF-8"?>
<pythonPanelDocument>
  <!-- This file contains definitions of Python interfaces and the
 interfaces menu.  It should not be hand-edited when it is being
 used by the application.  Note, that two definitions of the
 same interface or of the interfaces menu are not allowed
 in a single file. -->
  <interfacesMenu type="toolbar">
    <interfaceItem name="expressionPicker"/>
    <interfaceItem name="ReceiveKinect"/>
    <interfaceItem name="NodePicker"/>
    <interfaceItem name="sesi_quick_start"/>
    <interfaceItem name="interface1"/>
  </interfacesMenu>
  <interfacesMenu type="panetab">
    <interfaceItem name="expressionPicker"/>
    <interfaceItem name="ReceiveKinect"/>
    <interfaceItem name="NodePicker"/>
  </interfacesMenu>
  <interface name="expressionPicker" label="Expression Picker" icon="MISC_python" help_url="">
    <script><![CDATA[#https://www.off-soft.net/ja/develop/qt/qtb2.html

import hou
import toolutils
from PySide2 import QtWidgets, QtCore, QtGui
from kaToolsExpressionPicker.widgets import pickerWidget

reload(pickerWidget)


def createInterface():
    root = pickerWidget.pickerWidget()
    return root]]></script>
    <includeInPaneTabMenu menu_position="0" create_separator="false"/>
    <includeInToolbarMenu menu_position="101" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
  <interface name="sesi_quick_start" label="Quick Start: Calendar Example" icon="MISC_python" help_url="">
    <script><![CDATA[import hou
import toolutils
import addExpression
from PySide2 import QtWidgets, QtCore, QtGui

reload(addExpression)

class expressionTreeWidget(QtWidgets.QTreeWidget):
    def __init__(self, parent=None):
        QtWidgets.QTreeWidget.__init__(self, parent)

        self.setItemsExpandable(True)
        self.setDragEnabled(True)
        self.setDropIndicatorShown(True)
        self.setDragDropMode(QtWidgets.QAbstractItemView.InternalMove)
        self.setAlternatingRowColors(True)
        self.ScrollMode(QtWidgets.QAbstractItemView.ScrollPerPixel)
        self.setEditTriggers(QtWidgets.QAbstractItemView.SelectedClicked)
        print self.editTriggers()

    def mouseReleaseEvent(self, event):
        return_val = super( QtWidgets.QTreeWidget, self ).mouseReleaseEvent( event )
        print "mouse release"
        #print hou.ui.curDesktop().paneTabUnderCursor().type()
        widget = QtWidgets.QApplication.instance().widgetAt(event.globalX(), event.globalY())
        if widget:
            self.searchChildren(widget)
       

    def mouseMoveEvent(self, event):
        #return_val = super( QtWidgets.QTreeWidget, self ).mouseReleaseEvent( event )
        allowDrop = False
        widget = QtWidgets.QApplication.instance().widgetAt(event.globalX(), event.globalY())
        if widget:
            #self.searchChildren(widget)
            pass

    def searchChildren(self, parent):
        for child in parent.children():
                print child
                if child:
                    if isinstance(child, QtGui.QTextFrame):
                        print child.childFrames()
                    self.searchChildren(child)



#############################################################
### 
#############################################################


class pickerWidget(QtWidgets.QFrame):
    def __init__(self, parent = None):
        #super(MyWidget, self).__init__(parent)
        QtWidgets.QFrame.__init__(self, parent)
        
        self.preset = addExpression.wranglePreset(0)
        self.draggedItem = None

        layout = QtWidgets.QVBoxLayout()

        # set up label
        title = QtWidgets.QLabel('Expression Picker')


        # set up button
        buttonLayout = QtWidgets.QHBoxLayout()
        self.refreshButton = QtWidgets.QPushButton("Refresh")
        self.saveButton = QtWidgets.QPushButton("Save")
        self.deleteButton = QtWidgets.QPushButton("Delete")
        buttonLayout.addWidget(self.refreshButton)
        buttonLayout.addWidget(self.saveButton)
        buttonLayout.addWidget(self.deleteButton)
        self.refreshButton.clicked.connect(self.onRefreshClicked)
        self.saveButton.clicked.connect(self.onSaveClicked)
        self.deleteButton.clicked.connect(self.onDeleteClicked)

    
        # set up tree widget
        self.treeWidget = expressionTreeWidget()
        self.treeWidget.setColumnCount(2)
        self.treeWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.treeWidget.setColumnWidth(0, 150)
        self.treeWidget.setHeaderLabels(["Name", "Expression"])
        #self.treeWidget.setFocusPolicy(QtWidgets.Qt.WheelFocus)
        self.treeWidget.itemPressed.connect(self.onItemPressed)
        self.treeWidget.itemDoubleClicked.connect(self.onItemDoubleClicked)
        
        layout.addWidget(title)
        layout.addLayout(buttonLayout)
        layout.addWidget(self.treeWidget)
        self.setLayout(layout)

        menus = self.importExpressionLabels()
        menus, categories = self.importExpressions(menus)
        self.updateTree(menus, categories)



    def onItemPressed(self, item, colmun):
        #print "item pressed"
        self.draggedItem =  item.text(1)

    def onItemDoubleClicked(self, item, column):
        selectecNodes = hou.selectedNodes()
        selectecNode = None

        if len(selectecNodes) == 0:
            return
        selectecNode = selectecNodes[0]
        if selectecNode.type() == hou.sopNodeTypeCategory().nodeTypes()["attribwrangle"]:
            self.draggedItem = item.text(1)
            parmText = selectecNode.parm("snippet").eval()
            selectecNode.parm("snippet").set(parmText + self.draggedItem)


    def onRefreshClicked(self):
        self.preset = addExpression.wranglePreset(0)
        menus = self.importExpressionLabels()
        menus, categories = self.importExpressions(menus)
        self.updateTree(menus, categories)


    def onSaveClicked(self):
        self.preset = addExpression.wranglePreset(2)

        selectecNodes = hou.selectedNodes()
        selectecNode = None

        if len(selectecNodes) == 0:
            return
        selectecNode = selectecNodes[0]
        if selectecNode.type() == hou.sopNodeTypeCategory().nodeTypes()["attribwrangle"]:
            kwargs = {"parms":[selectecNode.parm("snippet")]}

            self.preset.saveXML(kwargs)

    def onDeleteClicked(self):
        selected = self.treeWidget.selectedItems()
        self.deleteExpression(selected)


############################################################



    def importExpressionLabels(self):
        # Reaed Presets
        menus = self.preset.makeMenus()
        #print menus
        return menus

    def importExpressions(self, menus):
        num = len(menus)/2
        categories = []
        for i in range(0, num):
            menus[i*2+1] = self.preset.exportExpression({"selectedlabel" : menus[i*2]})
            categories.append(self.preset.exportCategory({"selectedlabel" : menus[i*2]}))
        return menus, categories


    def clearItems(self, item):
        #print item
        length = item.childCount()
        if length > 0:
            for i in range(0, length):
                item.child(0)
                item.removeChild(item.child(0))


    def deleteExpression(self, items):
        length = len(items)
        if length == 0:
            return
        else:
            for item in items:
                self.preset.deleteExpression(item.text(0))
            self.onRefreshClicked()



    def updateTree(self, menus, categories):
        # Add expressions to the tree widget
        try:
            if self.treeWidget.itemPressed is not None:
                self.treeWidget.itemPressed.disconnect()
            if self.treeWidget.itemDoubleClicked is not None:
                self.treeWidget.itemDoubleClicked.disconnect()
        except Exception:
            #print Exception
            pass


        length = self.treeWidget.topLevelItemCount()
        if length > 0:
            for i in range(0, length):
                #print i
                self.clearItems(self.treeWidget.topLevelItem(0))
                self.treeWidget.takeTopLevelItem(0)
        self.treeWidget.clear()

        num = len(menus)/2

        for i in range(0, num):
            font = None
            category = None
            items = self.treeWidget.findItems(categories[i], 0)
            #print items
            if len(items) == 0:
                #print "none"
                parent = QtWidgets.QTreeWidgetItem(self.treeWidget)
                parent.setText(0, categories[i])
                parent.setExpanded(True)
                category = parent

                font = category.font(0)
                font.setPointSize(11)
                category.setFont(0, font)
            else:
                category = items[0]
                font = category.font(0)

            
            brush0 = QtGui.QBrush(QtGui.QColor(0.3,0.3,1))
            
            font.setPointSize(10)
            child = QtWidgets.QTreeWidgetItem(category,[menus[2 * i], menus[2 * i + 1]])
            
            for column in range(0, child.columnCount()):
                child.setFont(column, font)

        
        self.treeWidget.itemPressed.connect(self.onItemPressed)
        self.treeWidget.itemDoubleClicked.connect(self.onItemDoubleClicked)




def createInterface():
    root = pickerWidget()
    return root]]></script>
    <help><![CDATA[]]></help>
  </interface>
  <interface name="ReceiveKinect" label="ReceiveKinect" icon="MISC_python" help_url="">
    <script><![CDATA[import hou
import toolutils
import addExpression
from PySide2 import QtWidgets, QtCore, QtGui

import socket
import time

class pickerWidget(QtWidgets.QFrame):
    def __init__(self, parent = None):
        QtWidgets.QFrame.__init__(self, parent)

        receivedData = ""

        layout = QtWidgets.QVBoxLayout()

        # set up button
        buttonLayout = QtWidgets.QHBoxLayout()
        self.ConnectButton = QtWidgets.QPushButton("Connect")
        self.DisconnectButton = QtWidgets.QPushButton("Disconnect")
        buttonLayout.addWidget(self.ConnectButton)
        buttonLayout.addWidget(self.DisconnectButton)
        self.ConnectButton.clicked.connect(self.onConnectClicked)
        self.DisconnectButton.clicked.connect(self.onDisconnectClicked)
                
        #layout.addWidget(title)
        layout.addLayout(buttonLayout)
        self.setLayout(layout)



    def onConnectClicked(self):
        self.recvThread = TcpThread(self)

    def onDisconnectClicked(self):
        print "disconnect"

    def onCaptureDataClicked(self):
        dataVals = self.convertData(self.receivedData)


    def convertData(data):
        valsStr = data.split(",")[0:-1]
        valsInt = []
        length = len(valsStr)
        for i in range(0,length - 1):
            valsInt[i] = int(valsStr[i])





from threading import Thread

class TcpThread(Thread):
    def __init__(self, widget):
        Thread.__init__(self)
        self.widget = widget

        host='127.0.0.1'
        port = 8889

        self.serversock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.serversock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.serversock.bind((host,port))
        self.serversock.listen(1)
        self.setDaemon(True)
        self.start()

    def run(self):
        print ('Waiting for connections...')
        clientsock, client_address = self.serversock.accept()
        print ("accept")
        msg = bytearray()
        sendToHou =''

        while True:
            
            data = clientsock.recv(4096)
            
            if not data:
                break
            #print str('Received -> %s' % (data))
            if "fin" in str(data):
                msg += data
                #print (str(data)),
                sendToHou = msg
                self.widget.receivedData = msg
                msg = bytearray()
            else:
                msg += data
                pass

        try:
            self.socket.shutdown(socket.SHUT_RDWR)
        except:
            pass

        print ("end")
        clientsock.close()
        print (len(str(sendToHou)))




def createInterface():
    root = pickerWidget()
    return root]]></script>
    <includeInPaneTabMenu menu_position="0" create_separator="false"/>
    <includeInToolbarMenu menu_position="102" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
  <interface name="NodePicker" label="NodePicker" icon="MISC_python" help_url="">
    <script><![CDATA[from hutil.Qt import QtCore, QtGui, QtWidgets
class DDTest(QtWidgets.QFrame):
    def __init__(self, parent=None):
        super(DDTest, self).__init__(parent)
        
        self.myList = QtWidgets.QListView(self)
        self.myModel = QtGui.QStandardItemModel(self.myList)
        self.myList.setModel(self.myModel)
        
        self.mySlider = QtWidgets.QSlider(QtCore.Qt.Horizontal, self)
        self.mySlider.setRange(1, 100)
        self.mySlider.setSliderPosition(20)
        self.mySlider.valueChanged.connect(self.sliderChange)
        
        list_label = QtWidgets.QLabel("Selected nodes (drag and drop to add):")
        slider_label = QtWidgets.QLabel("Uniform scale:")
        
        horiz_layout = QtWidgets.QHBoxLayout()
        horiz_layout.addWidget(slider_label)
        horiz_layout.addWidget(self.mySlider)
        
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(list_label)
        layout.addWidget(self.myList)
        layout.addLayout(horiz_layout)
                
        self.setLayout(layout)
        self.setAcceptDrops(True)
        
    def dragEnterEvent(self, event):
        event.acceptProposedAction()

    def dropEvent(self, event):
        str = event.mimeData().text()
        index = str.find(",")

        while index > 0:
            item = QtGui.QStandardItem()
            item.setText(str[0:index])
            item.setCheckable(True)
            item.setCheckState(QtCore.Qt.Checked)
            self.myModel.appendRow(item)
            
            str = str[index+1:]
            index = str.find(",")

        item = QtGui.QStandardItem()
        item.setText(str)
        item.setCheckable(True)
        item.setCheckState(QtCore.Qt.Checked)
        self.myModel.appendRow(item)
       
        event.acceptProposedAction()
    
    def sliderChange(self, value):
        scale = float(value) / 20
        for i in range(0, self.myModel.rowCount()):
            item = self.myModel.item(i)
            if item.checkState() is QtCore.Qt.Checked:
                node = hou.node(item.text())
                if node is not None:
                    node.setParms({"scale": scale})
                
def createInterface():
    return DDTest()]]></script>
    <includeInToolbarMenu menu_position="103" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
  <interface name="interface1" label="New Python Interface" icon="MISC_python" help_url="">
    <script><![CDATA[def createInterface():
    from pw_VEX_Editor import editor_panel
    reload(editor_panel)
    w = editor_panel.VEXEditorPanelClass()
    w.setStyleSheet('')
    import hqt
    w.setStyleSheet( hqt.get_h14_style() )
    return w]]></script>
    <includeInToolbarMenu menu_position="104" create_separator="false"/>
    <help><![CDATA[]]></help>
  </interface>
</pythonPanelDocument>
